name: Frontend CI
on:
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('frontend/package-lock.json') }}
      - name: Install dependencies
        run: cd starter/frontend && npm ci
      - name: Run linter
        run: cd starter/frontend && npm run lint
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('frontend/package-lock.json') }}
          
      - name: Set up MutationObserver
        run: |
          echo "global.MutationObserver = class { constructor(callback) { this.callback = callback; } observe() {} disconnect() {}; };" > setupTests.js

      - name: Run tests
        run: cd starter/frontend && npm test
        
      - name: Install dependencies
        run: cd starter/frontend && npm ci
        
      - name: Run tests
        run: cd starter/frontend && npm test
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    environment:
      name: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_FE_REPO_NAME }}
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
          BACKEND_ENDPOINT: ${{ secrets.BACKEND_ENDPOINT }}
        run: |
          cd starter/frontend
          docker build --build-arg REACT_APP_MOVIE_API_URL=$BACKEND_ENDPOINT -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          echo "List Docker images"
          docker images
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
